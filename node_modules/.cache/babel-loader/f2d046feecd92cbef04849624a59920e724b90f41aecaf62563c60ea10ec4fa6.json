{"ast":null,"code":"import userData from \"./CurrentUser.json\";\nconst fs = require('fs');\n\n// Read the user data from a JSON file\n\nlet user;\n\n// Read the user data from a JSON file\ntry {\n  const userData = fs.readFileSync('CurrentUser.json', 'utf8');\n  user = JSON.parse(userData);\n} catch (err) {\n  console.error('Error reading user data:', err);\n  // Handle the error, e.g., create a new user object\n  user = {\n    netid: \"jones1\",\n    password: \"1234\"\n    // Other user attributes...\n  };\n}\n\n// Function to update user attributes\nexport function updateUser(updatedUserAttributes) {\n  // Check if the user exists based on userId (netid)\n  if (user.netid === updatedUserAttributes.netid) {\n    // Merge the updated attributes into the user object\n    const updatedUser = {\n      ...user,\n      ...updatedUserAttributes\n    };\n    console.log('updatedUser:', updatedUser);\n\n    // Update the user object\n    user = updatedUser;\n\n    // You can also save the updated user object back to the file\n    try {\n      fs.writeFileSync('CurrentUser.json', JSON.stringify(updatedUser, null, 2), 'utf8');\n    } catch (err) {\n      console.error('Error writing user data to file:', err);\n    }\n    return updatedUser;\n  } else {\n    // Handle the case where the user does not exist\n    return null;\n  }\n}\n\n// Function to retrieve user data by netid\nexport function getUser(input_user) {\n  return user;\n}","map":{"version":3,"names":["userData","fs","require","user","readFileSync","JSON","parse","err","console","error","netid","password","updateUser","updatedUserAttributes","updatedUser","log","writeFileSync","stringify","getUser","input_user"],"sources":["/Users/mona/Desktop/CS465_Project/CS465/src/CurrentUser.js"],"sourcesContent":["import userData from \"./CurrentUser.json\";\n\nconst fs = require('fs');\n\n// Read the user data from a JSON file\n\nlet user;\n\n// Read the user data from a JSON file\ntry {\n  const userData = fs.readFileSync('CurrentUser.json', 'utf8');\n  user = JSON.parse(userData);\n} catch (err) {\n  console.error('Error reading user data:', err);\n  // Handle the error, e.g., create a new user object\n  user = {\n    netid: \"jones1\",\n    password: \"1234\",\n    // Other user attributes...\n  };\n}\n\n\n// Function to update user attributes\nexport function updateUser(updatedUserAttributes) {\n  // Check if the user exists based on userId (netid)\n  if (user.netid === updatedUserAttributes.netid) {\n    // Merge the updated attributes into the user object\n    const updatedUser = { ...user, ...updatedUserAttributes };\n    console.log('updatedUser:', updatedUser);\n\n    // Update the user object\n    user = updatedUser;\n\n    // You can also save the updated user object back to the file\n    try {\n      fs.writeFileSync('CurrentUser.json', JSON.stringify(updatedUser, null, 2), 'utf8');\n    } catch (err) {\n      console.error('Error writing user data to file:', err);\n    }\n\n    return updatedUser;\n  } else {\n    // Handle the case where the user does not exist\n    return null;\n  }\n}\n\n// Function to retrieve user data by netid\nexport function getUser(input_user) {\n  return user;\n}\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oBAAoB;AAEzC,MAAMC,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;;AAExB;;AAEA,IAAIC,IAAI;;AAER;AACA,IAAI;EACF,MAAMH,QAAQ,GAAGC,EAAE,CAACG,YAAY,CAAC,kBAAkB,EAAE,MAAM,CAAC;EAC5DD,IAAI,GAAGE,IAAI,CAACC,KAAK,CAACN,QAAQ,CAAC;AAC7B,CAAC,CAAC,OAAOO,GAAG,EAAE;EACZC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,GAAG,CAAC;EAC9C;EACAJ,IAAI,GAAG;IACLO,KAAK,EAAE,QAAQ;IACfC,QAAQ,EAAE;IACV;EACF,CAAC;AACH;;AAGA;AACA,OAAO,SAASC,UAAUA,CAACC,qBAAqB,EAAE;EAChD;EACA,IAAIV,IAAI,CAACO,KAAK,KAAKG,qBAAqB,CAACH,KAAK,EAAE;IAC9C;IACA,MAAMI,WAAW,GAAG;MAAE,GAAGX,IAAI;MAAE,GAAGU;IAAsB,CAAC;IACzDL,OAAO,CAACO,GAAG,CAAC,cAAc,EAAED,WAAW,CAAC;;IAExC;IACAX,IAAI,GAAGW,WAAW;;IAElB;IACA,IAAI;MACFb,EAAE,CAACe,aAAa,CAAC,kBAAkB,EAAEX,IAAI,CAACY,SAAS,CAACH,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC;IACpF,CAAC,CAAC,OAAOP,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEF,GAAG,CAAC;IACxD;IAEA,OAAOO,WAAW;EACpB,CAAC,MAAM;IACL;IACA,OAAO,IAAI;EACb;AACF;;AAEA;AACA,OAAO,SAASI,OAAOA,CAACC,UAAU,EAAE;EAClC,OAAOhB,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}