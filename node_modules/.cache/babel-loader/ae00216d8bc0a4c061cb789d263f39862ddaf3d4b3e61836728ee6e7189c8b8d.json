{"ast":null,"code":"const user = {\n  netid: \"jones1\",\n  password: \"1234\",\n  first_name: \"Chancellor\",\n  last_name: \"Jones\",\n  profile_pic: \"default\",\n  gender: \"male\",\n  grade: \"senior\",\n  major: \"computer science\",\n  availability: \"default\",\n  fav_locations: \"default\",\n  sent_requests: [\"vadamo2\", \"killeen2\"],\n  received_requests: [\"freddy3\", \"chica4\"],\n  confirmed_requests: [\"bonnie5\", \"foxy8\"]\n};\n\n// Function to update user attributes\nexport function updateUser(userId, updatedUserAttributes) {\n  console.log('user before update:', user);\n  console.log('user before update:', userId);\n  // Check if the user exists based on userId (netid)\n  if (user.netid === userId) {\n    // Merge the updated attributes into the user object\n    const updatedUser = {\n      ...user,\n      ...updatedUserAttributes\n    };\n    console.log('user before update:', user);\n    console.log('updatedUser:', updatedUser);\n\n    // You can update the user object here or save it to a database\n    // For simplicity, we'll just update the user object\n    Object.assign(user, updatedUser);\n    return updatedUser;\n  } else {\n    // Handle the case where the user does not exist\n    return null;\n  }\n}\n\n// Function to retrieve user data by netid\nexport function getUser(input_user) {\n  return user;\n}","map":{"version":3,"names":["user","netid","password","first_name","last_name","profile_pic","gender","grade","major","availability","fav_locations","sent_requests","received_requests","confirmed_requests","updateUser","userId","updatedUserAttributes","console","log","updatedUser","Object","assign","getUser","input_user"],"sources":["/Users/mona/Desktop/CS465_Project/CS465/src/utilities.js"],"sourcesContent":["const user = {\n    netid: \"jones1\",\n    password: \"1234\",\n    first_name: \"Chancellor\",\n    last_name: \"Jones\",\n    profile_pic: \"default\",\n    gender: \"male\",\n    grade: \"senior\",\n    major: \"computer science\",\n    availability: \"default\",\n    fav_locations: \"default\",\n    sent_requests: [\"vadamo2\", \"killeen2\"],\n    received_requests: [\"freddy3\", \"chica4\"],\n    confirmed_requests: [\"bonnie5\", \"foxy8\"]\n  };\n  \n  // Function to update user attributes\n  export function updateUser(userId, updatedUserAttributes) {\n    console.log('user before update:', user);\n    console.log('user before update:', userId);\n    // Check if the user exists based on userId (netid)\n    if (user.netid === userId) {\n      // Merge the updated attributes into the user object\n      const updatedUser = { ...user, ...updatedUserAttributes };\n      console.log('user before update:', user);\n    console.log('updatedUser:', updatedUser);\n  \n      // You can update the user object here or save it to a database\n      // For simplicity, we'll just update the user object\n      Object.assign(user, updatedUser);\n  \n      return updatedUser;\n    } else {\n      // Handle the case where the user does not exist\n      return null;\n    }\n  }\n  \n  // Function to retrieve user data by netid\n  export function getUser(input_user) {\n    return user;\n  }\n  "],"mappings":"AAAA,MAAMA,IAAI,GAAG;EACTC,KAAK,EAAE,QAAQ;EACfC,QAAQ,EAAE,MAAM;EAChBC,UAAU,EAAE,YAAY;EACxBC,SAAS,EAAE,OAAO;EAClBC,WAAW,EAAE,SAAS;EACtBC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,kBAAkB;EACzBC,YAAY,EAAE,SAAS;EACvBC,aAAa,EAAE,SAAS;EACxBC,aAAa,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC;EACtCC,iBAAiB,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAC;EACxCC,kBAAkB,EAAE,CAAC,SAAS,EAAE,OAAO;AACzC,CAAC;;AAED;AACA,OAAO,SAASC,UAAUA,CAACC,MAAM,EAAEC,qBAAqB,EAAE;EACxDC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAElB,IAAI,CAAC;EACxCiB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEH,MAAM,CAAC;EAC1C;EACA,IAAIf,IAAI,CAACC,KAAK,KAAKc,MAAM,EAAE;IACzB;IACA,MAAMI,WAAW,GAAG;MAAE,GAAGnB,IAAI;MAAE,GAAGgB;IAAsB,CAAC;IACzDC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAElB,IAAI,CAAC;IAC1CiB,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEC,WAAW,CAAC;;IAEtC;IACA;IACAC,MAAM,CAACC,MAAM,CAACrB,IAAI,EAAEmB,WAAW,CAAC;IAEhC,OAAOA,WAAW;EACpB,CAAC,MAAM;IACL;IACA,OAAO,IAAI;EACb;AACF;;AAEA;AACA,OAAO,SAASG,OAAOA,CAACC,UAAU,EAAE;EAClC,OAAOvB,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}