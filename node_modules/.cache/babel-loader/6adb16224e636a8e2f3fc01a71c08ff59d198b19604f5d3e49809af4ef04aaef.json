{"ast":null,"code":"var _jsxFileName = \"/Users/mona/Desktop/CS465_Project/CS465/src/SearchContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport UserCard from './UserCard';\nimport { getUsersWithCompatibleAvailability } from './AvailibilityUtils';\nimport { getUser } from './CurrentUser';\nimport { Link, useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Searchcontainer = () => {\n  _s();\n  const {\n    user\n  } = useParams();\n  const [sampleUser, setSampleUser] = useState(null); // Initialize with null\n  const [compatibleUsers, setCompatibleUsers] = useState([]);\n  console.log('User Data:', user);\n  useEffect(() => {\n    const fetchData = async () => {\n      const userData = await getUser(user);\n      setSampleUser(userData);\n      const users = getUsersWithCompatibleAvailability(userData);\n      setCompatibleUsers(users);\n    };\n    fetchData(); // Call the fetchData function when the component mounts\n  }, [user]);\n\n  // TODO:\n  // let user select a day to check for availibility for that day - input\n  // basically you have to check what day is the date\n  // then add one more argument 'day' in the function below in  './AvailibilityUtils';\n  // eg. getUsersWithCompatibleAvailability(user, day);\n  // and also change the logic in isComapitble(), etc.\n\n  // TODO:\n  // two tabs for: location and time filtering\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Search for Lunchtime Companions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), compatibleUsers.length > 0 ? compatibleUsers.map(user => /*#__PURE__*/_jsxDEV(UserCard, {\n      user: user\n    }, user.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 39\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No compatible users found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(Searchcontainer, \"d2w+bL0K46eoPn+/bO/x/MduiLY=\", false, function () {\n  return [useParams];\n});\n_c = Searchcontainer;\nvar _c;\n$RefreshReg$(_c, \"Searchcontainer\");","map":{"version":3,"names":["React","useState","useEffect","UserCard","getUsersWithCompatibleAvailability","getUser","Link","useParams","jsxDEV","_jsxDEV","Searchcontainer","_s","user","sampleUser","setSampleUser","compatibleUsers","setCompatibleUsers","console","log","fetchData","userData","users","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","id","_c","$RefreshReg$"],"sources":["/Users/mona/Desktop/CS465_Project/CS465/src/SearchContainer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport UserCard from './UserCard';\nimport { getUsersWithCompatibleAvailability } from './AvailibilityUtils';\nimport {getUser} from './CurrentUser';\nimport { Link, useParams } from 'react-router-dom';\n\nexport const Searchcontainer = () => {\n  \n  const { user } = useParams();\n  const [sampleUser, setSampleUser] = useState(null); // Initialize with null\n  const [compatibleUsers, setCompatibleUsers] = useState([]);\n\n  console.log('User Data:', user);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const userData = await getUser(user);\n      setSampleUser(userData);\n\n      const users = getUsersWithCompatibleAvailability(userData);\n      setCompatibleUsers(users);\n    };\n\n    fetchData(); // Call the fetchData function when the component mounts\n  }, [user]);\n  \n  \n  // TODO:\n  // let user select a day to check for availibility for that day - input\n  // basically you have to check what day is the date\n  // then add one more argument 'day' in the function below in  './AvailibilityUtils';\n  // eg. getUsersWithCompatibleAvailability(user, day);\n  // and also change the logic in isComapitble(), etc.\n\n  // TODO:\n  // two tabs for: location and time filtering\n\n\n  return (\n    <div>\n      <h1>Search for Lunchtime Companions</h1>\n      {compatibleUsers.length > 0 ? (\n        compatibleUsers.map((user) => <UserCard key={user.id} user={user} />)\n      ) : (\n        <p>No compatible users found.</p>\n      )}\n    </div>\n  );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,kCAAkC,QAAQ,qBAAqB;AACxE,SAAQC,OAAO,QAAO,eAAe;AACrC,SAASC,IAAI,EAAEC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEnC,MAAM;IAAEC;EAAK,CAAC,GAAGL,SAAS,CAAC,CAAC;EAC5B,MAAM,CAACM,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACpD,MAAM,CAACc,eAAe,EAAEC,kBAAkB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAE1DgB,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEN,IAAI,CAAC;EAE/BV,SAAS,CAAC,MAAM;IACd,MAAMiB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,QAAQ,GAAG,MAAMf,OAAO,CAACO,IAAI,CAAC;MACpCE,aAAa,CAACM,QAAQ,CAAC;MAEvB,MAAMC,KAAK,GAAGjB,kCAAkC,CAACgB,QAAQ,CAAC;MAC1DJ,kBAAkB,CAACK,KAAK,CAAC;IAC3B,CAAC;IAEDF,SAAS,CAAC,CAAC,CAAC,CAAC;EACf,CAAC,EAAE,CAACP,IAAI,CAAC,CAAC;;EAGV;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAGA,oBACEH,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAA+B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACvCX,eAAe,CAACY,MAAM,GAAG,CAAC,GACzBZ,eAAe,CAACa,GAAG,CAAEhB,IAAI,iBAAKH,OAAA,CAACN,QAAQ;MAAeS,IAAI,EAAEA;IAAK,GAApBA,IAAI,CAACiB,EAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CAAC,CAAC,gBAErEjB,OAAA;MAAAa,QAAA,EAAG;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACjC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACf,EAAA,CA1CWD,eAAe;EAAA,QAETH,SAAS;AAAA;AAAAuB,EAAA,GAFfpB,eAAe;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}