{"ast":null,"code":"import { db, ref, get, update } from './DBUtils'; // Import necessary functions\nimport { query, orderByChild, equalTo } from 'firebase/firestore';\n\n// Function to update user attributes\nexport async function updateUser(updatedUserAttributes) {\n  const userId = updatedUserAttributes.netid; // Assuming 'netid' is the user's identifier\n\n  try {\n    // Create a reference to the user's data in the Firebase database\n    const userRef = ref(db, 'users/' + userId);\n\n    // Fetch the user's data\n    const userSnapshot = await get(userRef);\n    if (userSnapshot.exists()) {\n      const user = userSnapshot.val();\n      const updatedUser = {\n        ...user,\n        ...updatedUserAttributes\n      };\n\n      // Update the user's data in the database\n      await update(userRef, updatedUser);\n      return updatedUser;\n    } else {\n      // Handle the case where the user does not exist\n      return null;\n    }\n  } catch (error) {\n    console.error('Error updating user data:', error);\n    return null;\n  }\n}\n\n// Function to retrieve user data by netId\nexport async function getUser(netId) {\n  try {\n    // Create a reference to the Firebase database\n    const dbRef = ref(db);\n\n    // Query the database for users with the specified netId\n    const queryRef = query(dbRef, orderByChild('netId'), equalTo(netId));\n\n    // Execute the query and get the result\n    const querySnapshot = await get(queryRef);\n    if (querySnapshot.exists()) {\n      // Assuming there is only one user with the specified netId\n      const userData = querySnapshot.val();\n      const userId = Object.keys(userData)[0];\n      return userData[userId];\n    } else {\n      // Handle the case where the user does not exist\n      return null;\n    }\n  } catch (error) {\n    console.error('Error fetching user data:', error);\n    return null;\n  }\n}","map":{"version":3,"names":["db","ref","get","update","query","orderByChild","equalTo","updateUser","updatedUserAttributes","userId","netid","userRef","userSnapshot","exists","user","val","updatedUser","error","console","getUser","netId","dbRef","queryRef","querySnapshot","userData","Object","keys"],"sources":["/Users/mona/Desktop/CS465_Project/CS465/src/CurrentUser.js"],"sourcesContent":["import { db, ref, get, update } from './DBUtils'; // Import necessary functions\nimport { query, orderByChild, equalTo} from 'firebase/firestore';\n\n// Function to update user attributes\nexport async function updateUser(updatedUserAttributes) {\n  const userId = updatedUserAttributes.netid; // Assuming 'netid' is the user's identifier\n\n  try {\n    // Create a reference to the user's data in the Firebase database\n    const userRef = ref(db, 'users/' + userId);\n\n    // Fetch the user's data\n    const userSnapshot = await get(userRef);\n\n    if (userSnapshot.exists()) {\n      const user = userSnapshot.val();\n      const updatedUser = { ...user, ...updatedUserAttributes };\n\n      // Update the user's data in the database\n      await update(userRef, updatedUser);\n\n      return updatedUser;\n    } else {\n      // Handle the case where the user does not exist\n      return null;\n    }\n  } catch (error) {\n    console.error('Error updating user data:', error);\n    return null;\n  }\n}\n\n// Function to retrieve user data by netId\nexport async function getUser(netId) {\n  try {\n    // Create a reference to the Firebase database\n    const dbRef = ref(db);\n\n    // Query the database for users with the specified netId\n    const queryRef = query(\n      dbRef,\n      orderByChild('netId'),\n      equalTo(netId)\n    );\n\n    // Execute the query and get the result\n    const querySnapshot = await get(queryRef);\n\n    if (querySnapshot.exists()) {\n      // Assuming there is only one user with the specified netId\n      const userData = querySnapshot.val();\n      const userId = Object.keys(userData)[0];\n      return userData[userId];\n    } else {\n      // Handle the case where the user does not exist\n      return null;\n    }\n  } catch (error) {\n    console.error('Error fetching user data:', error);\n    return null;\n  }\n}\n\n\n"],"mappings":"AAAA,SAASA,EAAE,EAAEC,GAAG,EAAEC,GAAG,EAAEC,MAAM,QAAQ,WAAW,CAAC,CAAC;AAClD,SAASC,KAAK,EAAEC,YAAY,EAAEC,OAAO,QAAO,oBAAoB;;AAEhE;AACA,OAAO,eAAeC,UAAUA,CAACC,qBAAqB,EAAE;EACtD,MAAMC,MAAM,GAAGD,qBAAqB,CAACE,KAAK,CAAC,CAAC;;EAE5C,IAAI;IACF;IACA,MAAMC,OAAO,GAAGV,GAAG,CAACD,EAAE,EAAE,QAAQ,GAAGS,MAAM,CAAC;;IAE1C;IACA,MAAMG,YAAY,GAAG,MAAMV,GAAG,CAACS,OAAO,CAAC;IAEvC,IAAIC,YAAY,CAACC,MAAM,CAAC,CAAC,EAAE;MACzB,MAAMC,IAAI,GAAGF,YAAY,CAACG,GAAG,CAAC,CAAC;MAC/B,MAAMC,WAAW,GAAG;QAAE,GAAGF,IAAI;QAAE,GAAGN;MAAsB,CAAC;;MAEzD;MACA,MAAML,MAAM,CAACQ,OAAO,EAAEK,WAAW,CAAC;MAElC,OAAOA,WAAW;IACpB,CAAC,MAAM;MACL;MACA,OAAO,IAAI;IACb;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO,IAAI;EACb;AACF;;AAEA;AACA,OAAO,eAAeE,OAAOA,CAACC,KAAK,EAAE;EACnC,IAAI;IACF;IACA,MAAMC,KAAK,GAAGpB,GAAG,CAACD,EAAE,CAAC;;IAErB;IACA,MAAMsB,QAAQ,GAAGlB,KAAK,CACpBiB,KAAK,EACLhB,YAAY,CAAC,OAAO,CAAC,EACrBC,OAAO,CAACc,KAAK,CACf,CAAC;;IAED;IACA,MAAMG,aAAa,GAAG,MAAMrB,GAAG,CAACoB,QAAQ,CAAC;IAEzC,IAAIC,aAAa,CAACV,MAAM,CAAC,CAAC,EAAE;MAC1B;MACA,MAAMW,QAAQ,GAAGD,aAAa,CAACR,GAAG,CAAC,CAAC;MACpC,MAAMN,MAAM,GAAGgB,MAAM,CAACC,IAAI,CAACF,QAAQ,CAAC,CAAC,CAAC,CAAC;MACvC,OAAOA,QAAQ,CAACf,MAAM,CAAC;IACzB,CAAC,MAAM;MACL;MACA,OAAO,IAAI;IACb;EACF,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO,IAAI;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}