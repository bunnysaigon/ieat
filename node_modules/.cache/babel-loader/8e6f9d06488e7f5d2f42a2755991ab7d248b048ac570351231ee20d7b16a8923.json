{"ast":null,"code":"import { db, ref, get, update } from './DBUtils'; // Import necessary functions\nimport { getDoc, collection } from 'firebase/firestore';\nexport async function getUser(netid) {\n  const userRef = collection(db, 'users'); // Assuming 'users' is the collection name\n  const userDoc = await getDoc(userRef);\n  console.log(\"hihihi\");\n  if (userDoc.exists()) {\n    return userDoc.data();\n  } else {\n    // Handle the case where the user does not exist\n    console.log(`User with netid ${netid} does not exist.`);\n    return null;\n  }\n}\n\n// Function to update user attributes\nexport async function updateUser(updatedUserAttributes) {\n  const userId = updatedUserAttributes.netid; // Assuming 'netid' is the user's identifier\n\n  try {\n    // Create a reference to the user's data in the Firebase database\n    const userRef = ref(db, 'users');\n\n    // Fetch the user's data\n    const userSnapshot = await get(userRef);\n    if (userSnapshot.exists()) {\n      const user = userSnapshot.val();\n      const updatedUser = {\n        ...user,\n        ...updatedUserAttributes\n      };\n\n      // Update the user's data in the database\n      await update(userRef, updatedUser);\n      return updatedUser;\n    } else {\n      // Handle the case where the user does not exist\n      return null;\n    }\n  } catch (error) {\n    console.error('Error updating user data:', error);\n    return null;\n  }\n}\n\n// // Function to retrieve user data by netId\n// export async function getUser(netId) {\n//   try {\n//     // Create a reference to the Firebase database\n//     const dbRef = ref(db);\n\n//     // Query the database for users with the specified netId\n//     const queryRef = query(\n//       dbRef,\n//       orderByChild('netId'),\n//       equalTo(netId)\n//     );\n\n//     // Execute the query and get the result\n//     const querySnapshot = await get(queryRef);\n\n//     if (querySnapshot.exists()) {\n//       // Assuming there is only one user with the specified netId\n//       const userData = querySnapshot.val();\n//       const userId = Object.keys(userData)[0];\n//       return userData[userId];\n//     } else {\n//       // Handle the case where the user does not exist\n//       return null;\n//     }\n//   } catch (error) {\n//     console.error('Error fetching user data:', error);\n//     return null;\n//   }\n// }","map":{"version":3,"names":["db","ref","get","update","getDoc","collection","getUser","netid","userRef","userDoc","console","log","exists","data","updateUser","updatedUserAttributes","userId","userSnapshot","user","val","updatedUser","error"],"sources":["/Users/mona/Desktop/CS465_Project/CS465/src/CurrentUser.js"],"sourcesContent":["import { db, ref, get, update } from './DBUtils'; // Import necessary functions\nimport { getDoc, collection  } from 'firebase/firestore';\n\nexport async function getUser(netid) {\n  \n    const userRef = collection(db, 'users'); // Assuming 'users' is the collection name\n    const userDoc = await getDoc(userRef);\n    console.log(\"hihihi\");\n\n    if (userDoc.exists()) {\n      return userDoc.data();\n    } else {\n      // Handle the case where the user does not exist\n      console.log(`User with netid ${netid} does not exist.`);\n      return null;\n    }\n\n    \n}\n\n\n// Function to update user attributes\nexport async function updateUser(updatedUserAttributes) {\n  const userId = updatedUserAttributes.netid; // Assuming 'netid' is the user's identifier\n\n  try {\n    // Create a reference to the user's data in the Firebase database\n    const userRef = ref(db, 'users');\n\n    // Fetch the user's data\n    const userSnapshot = await get(userRef);\n\n    if (userSnapshot.exists()) {\n      const user = userSnapshot.val();\n      const updatedUser = { ...user, ...updatedUserAttributes };\n\n      // Update the user's data in the database\n      await update(userRef, updatedUser);\n\n      return updatedUser;\n    } else {\n      // Handle the case where the user does not exist\n      return null;\n    }\n  } catch (error) {\n    console.error('Error updating user data:', error);\n    return null;\n  }\n}\n\n// // Function to retrieve user data by netId\n// export async function getUser(netId) {\n//   try {\n//     // Create a reference to the Firebase database\n//     const dbRef = ref(db);\n\n//     // Query the database for users with the specified netId\n//     const queryRef = query(\n//       dbRef,\n//       orderByChild('netId'),\n//       equalTo(netId)\n//     );\n\n//     // Execute the query and get the result\n//     const querySnapshot = await get(queryRef);\n\n//     if (querySnapshot.exists()) {\n//       // Assuming there is only one user with the specified netId\n//       const userData = querySnapshot.val();\n//       const userId = Object.keys(userData)[0];\n//       return userData[userId];\n//     } else {\n//       // Handle the case where the user does not exist\n//       return null;\n//     }\n//   } catch (error) {\n//     console.error('Error fetching user data:', error);\n//     return null;\n//   }\n// }\n\n\n"],"mappings":"AAAA,SAASA,EAAE,EAAEC,GAAG,EAAEC,GAAG,EAAEC,MAAM,QAAQ,WAAW,CAAC,CAAC;AAClD,SAASC,MAAM,EAAEC,UAAU,QAAS,oBAAoB;AAExD,OAAO,eAAeC,OAAOA,CAACC,KAAK,EAAE;EAEjC,MAAMC,OAAO,GAAGH,UAAU,CAACL,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC;EACzC,MAAMS,OAAO,GAAG,MAAML,MAAM,CAACI,OAAO,CAAC;EACrCE,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;EAErB,IAAIF,OAAO,CAACG,MAAM,CAAC,CAAC,EAAE;IACpB,OAAOH,OAAO,CAACI,IAAI,CAAC,CAAC;EACvB,CAAC,MAAM;IACL;IACAH,OAAO,CAACC,GAAG,CAAE,mBAAkBJ,KAAM,kBAAiB,CAAC;IACvD,OAAO,IAAI;EACb;AAGJ;;AAGA;AACA,OAAO,eAAeO,UAAUA,CAACC,qBAAqB,EAAE;EACtD,MAAMC,MAAM,GAAGD,qBAAqB,CAACR,KAAK,CAAC,CAAC;;EAE5C,IAAI;IACF;IACA,MAAMC,OAAO,GAAGP,GAAG,CAACD,EAAE,EAAE,OAAO,CAAC;;IAEhC;IACA,MAAMiB,YAAY,GAAG,MAAMf,GAAG,CAACM,OAAO,CAAC;IAEvC,IAAIS,YAAY,CAACL,MAAM,CAAC,CAAC,EAAE;MACzB,MAAMM,IAAI,GAAGD,YAAY,CAACE,GAAG,CAAC,CAAC;MAC/B,MAAMC,WAAW,GAAG;QAAE,GAAGF,IAAI;QAAE,GAAGH;MAAsB,CAAC;;MAEzD;MACA,MAAMZ,MAAM,CAACK,OAAO,EAAEY,WAAW,CAAC;MAElC,OAAOA,WAAW;IACpB,CAAC,MAAM;MACL;MACA,OAAO,IAAI;IACb;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdX,OAAO,CAACW,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO,IAAI;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}