{"ast":null,"code":"// const fs = require('fs');\nimport fs from 'fs';\n\n// Read the user data from a JSON file\n\nlet user;\nuser = require('./CurrentUser.json');\nconsole.error('user', user);\n\n// Read the user data from a JSON file\ntry {\n  // const userData = fs.readFileSync('CurrentUser.json', 'utf8');\n  // user = JSON.parse(userData);\n} catch (err) {\n  console.error('Error reading user data:', err);\n  // Handle the error, e.g., create a new user object\n  user = {\n    netid: \"jones1\",\n    password: \"1234\"\n    // Other user attributes...\n  };\n}\n\n// Function to update user attributes\nexport function updateUser(updatedUserAttributes) {\n  // Check if the user exists based on userId (netid)\n  if (user.netid === updatedUserAttributes.netid) {\n    // Merge the updated attributes into the user object\n    const updatedUser = {\n      ...user,\n      ...updatedUserAttributes\n    };\n    console.log('updatedUser:', updatedUser);\n\n    // Update the user object\n    user = updatedUser;\n\n    // You can also save the updated user object back to the file\n    // try {\n    //   fs.writeFileSync('CurrentUser.json', JSON.stringify(updatedUser, null, 2), 'utf8');\n    // } catch (err) {\n    //   console.error('Error writing user data to file:', err);\n    // }\n\n    return updatedUser;\n  } else {\n    // Handle the case where the user does not exist\n    return null;\n  }\n}\n\n// Function to retrieve user data by netid\nexport function getUser(input_user) {\n  return user;\n}","map":{"version":3,"names":["fs","user","require","console","error","err","netid","password","updateUser","updatedUserAttributes","updatedUser","log","getUser","input_user"],"sources":["/Users/mona/Desktop/CS465_Project/CS465/src/CurrentUser.js"],"sourcesContent":["// const fs = require('fs');\nimport fs from 'fs'\n\n// Read the user data from a JSON file\n\nlet user;\n\nuser = require('./CurrentUser.json');\nconsole.error('user', user);\n\n\n// Read the user data from a JSON file\ntry {\n  // const userData = fs.readFileSync('CurrentUser.json', 'utf8');\n  // user = JSON.parse(userData);\n} catch (err) {\n  console.error('Error reading user data:', err);\n  // Handle the error, e.g., create a new user object\n  user = {\n    netid: \"jones1\",\n    password: \"1234\",\n    // Other user attributes...\n  };\n}\n\n\n// Function to update user attributes\nexport function updateUser(updatedUserAttributes) {\n  // Check if the user exists based on userId (netid)\n  if (user.netid === updatedUserAttributes.netid) {\n    // Merge the updated attributes into the user object\n    const updatedUser = { ...user, ...updatedUserAttributes };\n    console.log('updatedUser:', updatedUser);\n\n    // Update the user object\n    user = updatedUser;\n\n    // You can also save the updated user object back to the file\n    // try {\n    //   fs.writeFileSync('CurrentUser.json', JSON.stringify(updatedUser, null, 2), 'utf8');\n    // } catch (err) {\n    //   console.error('Error writing user data to file:', err);\n    // }\n\n    return updatedUser;\n  } else {\n    // Handle the case where the user does not exist\n    return null;\n  }\n}\n\n// Function to retrieve user data by netid\nexport function getUser(input_user) {\n  return user;\n}\n"],"mappings":"AAAA;AACA,OAAOA,EAAE,MAAM,IAAI;;AAEnB;;AAEA,IAAIC,IAAI;AAERA,IAAI,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AACpCC,OAAO,CAACC,KAAK,CAAC,MAAM,EAAEH,IAAI,CAAC;;AAG3B;AACA,IAAI;EACF;EACA;AAAA,CACD,CAAC,OAAOI,GAAG,EAAE;EACZF,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEC,GAAG,CAAC;EAC9C;EACAJ,IAAI,GAAG;IACLK,KAAK,EAAE,QAAQ;IACfC,QAAQ,EAAE;IACV;EACF,CAAC;AACH;;AAGA;AACA,OAAO,SAASC,UAAUA,CAACC,qBAAqB,EAAE;EAChD;EACA,IAAIR,IAAI,CAACK,KAAK,KAAKG,qBAAqB,CAACH,KAAK,EAAE;IAC9C;IACA,MAAMI,WAAW,GAAG;MAAE,GAAGT,IAAI;MAAE,GAAGQ;IAAsB,CAAC;IACzDN,OAAO,CAACQ,GAAG,CAAC,cAAc,EAAED,WAAW,CAAC;;IAExC;IACAT,IAAI,GAAGS,WAAW;;IAElB;IACA;IACA;IACA;IACA;IACA;;IAEA,OAAOA,WAAW;EACpB,CAAC,MAAM;IACL;IACA,OAAO,IAAI;EACb;AACF;;AAEA;AACA,OAAO,SAASE,OAAOA,CAACC,UAAU,EAAE;EAClC,OAAOZ,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}