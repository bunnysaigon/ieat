{"ast":null,"code":"import { db } from './DBUtils';\nimport { ref, query, orderByChild, equalTo, get, set } from \"firebase/database\";\nexport async function getUser(netid) {\n  // TODO: \n  // now you need put params in the url like \n  // http://localhost:3000/profile/jones1 \n  // jones1 is just the netid\n  try {\n    // Use the 'db' to query the database and fetch user data based on the 'netId'\n    const userRef = ref(db, `/users`);\n    const snapshot = await get(userRef);\n    if (snapshot.exists()) {\n      // Extract and return the user data\n      const usersData = snapshot.val();\n      // Iterate through the users to find the one with the matching netid\n      for (const userId in usersData) {\n        const user = usersData[userId];\n        if (user.netid === netid) {\n          console.log(user);\n          return user;\n        }\n      }\n    } else {\n      // Handle the case when the user doesn't exist\n      return null;\n    }\n  } catch (error) {\n    // Handle any potential errors\n    console.error(\"Error fetching user:\", error);\n    throw error;\n  }\n}\nexport async function updateUser(netid, updatedUserAttributes) {\n  try {\n    // Implement the logic to update user attributes in the database\n    // You should use 'ref', 'set', 'update', or other relevant Firebase methods here\n    // Remember to handle any errors that may occur during the update process\n    // Create a reference to the user's data in the Firebase database\n    const usesrRef = ref(db, `/users`);\n    const userQuery = query(usersRef, orderByChild(\"netid\"), equalTo(netid));\n    const snapshot = await get(userQuery);\n\n    // TODO:\n    // find the user with the netid\n    // updathe the user in db\n\n    // const user = snapshot.val();\n\n    // const updatedUser = { ...user, ...updatedUserAttributes };\n\n    //   // Update the user's data in the database\n    // await update(userRef, updatedUser);\n\n    // return updatedUser;\n\n    if (snapshot.exists()) {\n      // Extract and return the user data\n\n      await update(userRef, updatedUser);\n      // Iterate through the users to find the one with the matching netid\n    } else {\n      // Handle the case when the user doesn't exist\n      return null;\n    }\n  } catch (error) {\n    // Handle any potential errors\n    console.error(\"Error updating user:\", error);\n    throw error;\n  }\n}","map":{"version":3,"names":["db","ref","query","orderByChild","equalTo","get","set","getUser","netid","userRef","snapshot","exists","usersData","val","userId","user","console","log","error","updateUser","updatedUserAttributes","usesrRef","userQuery","usersRef","update","updatedUser"],"sources":["/Users/mona/Desktop/CS465_Project/CS465/src/CurrentUser.js"],"sourcesContent":["import { db } from './DBUtils'; \nimport { ref, query, orderByChild, equalTo, get, set } from \"firebase/database\";\n\nexport async function getUser(netid) {\n  // TODO: \n  // now you need put params in the url like \n  // http://localhost:3000/profile/jones1 \n  // jones1 is just the netid\n  try {\n    // Use the 'db' to query the database and fetch user data based on the 'netId'\n    const userRef = ref(db, `/users`);\n    const snapshot = await get(userRef);\n\n    if (snapshot.exists()) {\n      // Extract and return the user data\n      const usersData = snapshot.val();\n      // Iterate through the users to find the one with the matching netid\n      for (const userId in usersData) {\n        const user = usersData[userId];\n        if (user.netid === netid) {\n          console.log(user);\n          return user; \n        }\n      }\n    } else {\n      // Handle the case when the user doesn't exist\n      return null;\n    }\n  } catch (error) {\n    // Handle any potential errors\n    console.error(\"Error fetching user:\", error);\n    throw error;\n  }\n}\n\nexport async function updateUser(netid, updatedUserAttributes) {\n  try {\n    // Implement the logic to update user attributes in the database\n    // You should use 'ref', 'set', 'update', or other relevant Firebase methods here\n    // Remember to handle any errors that may occur during the update process\n    // Create a reference to the user's data in the Firebase database\n    const usesrRef = ref(db, `/users`);\n    const userQuery = query(usersRef, orderByChild(\"netid\"), equalTo(netid));\n\n    const snapshot = await get(userQuery);\n\n\n    // TODO:\n    // find the user with the netid\n    // updathe the user in db\n\n    // const user = snapshot.val();\n\n    // const updatedUser = { ...user, ...updatedUserAttributes };\n\n    //   // Update the user's data in the database\n    // await update(userRef, updatedUser);\n\n    // return updatedUser;\n\n\n    if (snapshot.exists()) {\n      // Extract and return the user data\n      \n      await update(userRef, updatedUser);\n      // Iterate through the users to find the one with the matching netid\n      \n    } else {\n      // Handle the case when the user doesn't exist\n      return null;\n    }\n  } catch (error) {\n    // Handle any potential errors\n    console.error(\"Error updating user:\", error);\n    throw error;\n  }\n}"],"mappings":"AAAA,SAASA,EAAE,QAAQ,WAAW;AAC9B,SAASC,GAAG,EAAEC,KAAK,EAAEC,YAAY,EAAEC,OAAO,EAAEC,GAAG,EAAEC,GAAG,QAAQ,mBAAmB;AAE/E,OAAO,eAAeC,OAAOA,CAACC,KAAK,EAAE;EACnC;EACA;EACA;EACA;EACA,IAAI;IACF;IACA,MAAMC,OAAO,GAAGR,GAAG,CAACD,EAAE,EAAG,QAAO,CAAC;IACjC,MAAMU,QAAQ,GAAG,MAAML,GAAG,CAACI,OAAO,CAAC;IAEnC,IAAIC,QAAQ,CAACC,MAAM,CAAC,CAAC,EAAE;MACrB;MACA,MAAMC,SAAS,GAAGF,QAAQ,CAACG,GAAG,CAAC,CAAC;MAChC;MACA,KAAK,MAAMC,MAAM,IAAIF,SAAS,EAAE;QAC9B,MAAMG,IAAI,GAAGH,SAAS,CAACE,MAAM,CAAC;QAC9B,IAAIC,IAAI,CAACP,KAAK,KAAKA,KAAK,EAAE;UACxBQ,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;UACjB,OAAOA,IAAI;QACb;MACF;IACF,CAAC,MAAM;MACL;MACA,OAAO,IAAI;IACb;EACF,CAAC,CAAC,OAAOG,KAAK,EAAE;IACd;IACAF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeC,UAAUA,CAACX,KAAK,EAAEY,qBAAqB,EAAE;EAC7D,IAAI;IACF;IACA;IACA;IACA;IACA,MAAMC,QAAQ,GAAGpB,GAAG,CAACD,EAAE,EAAG,QAAO,CAAC;IAClC,MAAMsB,SAAS,GAAGpB,KAAK,CAACqB,QAAQ,EAAEpB,YAAY,CAAC,OAAO,CAAC,EAAEC,OAAO,CAACI,KAAK,CAAC,CAAC;IAExE,MAAME,QAAQ,GAAG,MAAML,GAAG,CAACiB,SAAS,CAAC;;IAGrC;IACA;IACA;;IAEA;;IAEA;;IAEA;IACA;;IAEA;;IAGA,IAAIZ,QAAQ,CAACC,MAAM,CAAC,CAAC,EAAE;MACrB;;MAEA,MAAMa,MAAM,CAACf,OAAO,EAAEgB,WAAW,CAAC;MAClC;IAEF,CAAC,MAAM;MACL;MACA,OAAO,IAAI;IACb;EACF,CAAC,CAAC,OAAOP,KAAK,EAAE;IACd;IACAF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}