{"ast":null,"code":"const user = {\n  netid: \"jones1\",\n  password: \"1234\",\n  first_name: \"Chancellor\",\n  last_name: \"Jones\",\n  profile_pic: \"default\",\n  gender: \"male\",\n  grade: \"senior\",\n  major: \"computer science\",\n  availability: {\n    monday: [{\n      start: \"09:00 AM\",\n      end: \"12:00 PM\"\n    }],\n    tuesday: [{\n      start: \"10:00 AM\",\n      end: \"01:00 PM\"\n    }],\n    wednesday: [],\n    thursday: [],\n    friday: []\n  },\n  fav_locations: \"default\",\n  sent_requests: [\"vadamo2\", \"killeen2\"],\n  received_requests: [\"freddy3\", \"chica4\"],\n  confirmed_requests: [\"bonnie5\", \"foxy8\"]\n};\n\n// Function to update user attributes\nexport function updateUser(updatedUserAttributes) {\n  // Check if the user exists based on userId (netid)\n  if (user.netid === updatedUserAttributes.netid) {\n    // Merge the updated attributes into the user object\n    const updatedUser = {\n      ...user,\n      ...updatedUserAttributes\n    };\n    console.log('updatedUser:', updatedUser);\n\n    // Can update the user object here or save it to a database\n    // For simplicity, just update the user object\n    Object.assign(user, updatedUser);\n    return updatedUser;\n  } else {\n    // Handle the case where the user does not exist\n    return null;\n  }\n}\n\n// Function to retrieve user data by netid\nexport function getUser(input_user) {\n  return user;\n}","map":{"version":3,"names":["user","netid","password","first_name","last_name","profile_pic","gender","grade","major","availability","monday","start","end","tuesday","wednesday","thursday","friday","fav_locations","sent_requests","received_requests","confirmed_requests","updateUser","updatedUserAttributes","updatedUser","console","log","Object","assign","getUser","input_user"],"sources":["/Users/mona/Desktop/CS465_Project/CS465/src/utilities.js"],"sourcesContent":["const user = {\n    netid: \"jones1\",\n    password: \"1234\",\n    first_name: \"Chancellor\",\n    last_name: \"Jones\",\n    profile_pic: \"default\",\n    gender: \"male\",\n    grade: \"senior\",\n    major: \"computer science\",\n    availability: {\n        monday: [{ start: \"09:00 AM\", end: \"12:00 PM\" }],\n        tuesday: [{ start: \"10:00 AM\", end: \"01:00 PM\" }],\n        wednesday: [],\n        thursday: [],\n        friday: [],\n      },\n    fav_locations: \"default\",\n    sent_requests: [\"vadamo2\", \"killeen2\"],\n    received_requests: [\"freddy3\", \"chica4\"],\n    confirmed_requests: [\"bonnie5\", \"foxy8\"]\n  };\n  \n  // Function to update user attributes\n  export function updateUser(updatedUserAttributes) {\n    \n    // Check if the user exists based on userId (netid)\n    if (user.netid === updatedUserAttributes.netid) {\n      // Merge the updated attributes into the user object\n      const updatedUser = { ...user, ...updatedUserAttributes };\n      console.log('updatedUser:', updatedUser);\n  \n      // Can update the user object here or save it to a database\n      // For simplicity, just update the user object\n      Object.assign(user, updatedUser);\n  \n      return updatedUser;\n    } else {\n      // Handle the case where the user does not exist\n      return null;\n    }\n  }\n  \n  // Function to retrieve user data by netid\n  export function getUser(input_user) {\n    return user;\n  }\n  "],"mappings":"AAAA,MAAMA,IAAI,GAAG;EACTC,KAAK,EAAE,QAAQ;EACfC,QAAQ,EAAE,MAAM;EAChBC,UAAU,EAAE,YAAY;EACxBC,SAAS,EAAE,OAAO;EAClBC,WAAW,EAAE,SAAS;EACtBC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,kBAAkB;EACzBC,YAAY,EAAE;IACVC,MAAM,EAAE,CAAC;MAAEC,KAAK,EAAE,UAAU;MAAEC,GAAG,EAAE;IAAW,CAAC,CAAC;IAChDC,OAAO,EAAE,CAAC;MAAEF,KAAK,EAAE,UAAU;MAAEC,GAAG,EAAE;IAAW,CAAC,CAAC;IACjDE,SAAS,EAAE,EAAE;IACbC,QAAQ,EAAE,EAAE;IACZC,MAAM,EAAE;EACV,CAAC;EACHC,aAAa,EAAE,SAAS;EACxBC,aAAa,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC;EACtCC,iBAAiB,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAC;EACxCC,kBAAkB,EAAE,CAAC,SAAS,EAAE,OAAO;AACzC,CAAC;;AAED;AACA,OAAO,SAASC,UAAUA,CAACC,qBAAqB,EAAE;EAEhD;EACA,IAAItB,IAAI,CAACC,KAAK,KAAKqB,qBAAqB,CAACrB,KAAK,EAAE;IAC9C;IACA,MAAMsB,WAAW,GAAG;MAAE,GAAGvB,IAAI;MAAE,GAAGsB;IAAsB,CAAC;IACzDE,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,WAAW,CAAC;;IAExC;IACA;IACAG,MAAM,CAACC,MAAM,CAAC3B,IAAI,EAAEuB,WAAW,CAAC;IAEhC,OAAOA,WAAW;EACpB,CAAC,MAAM;IACL;IACA,OAAO,IAAI;EACb;AACF;;AAEA;AACA,OAAO,SAASK,OAAOA,CAACC,UAAU,EAAE;EAClC,OAAO7B,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}