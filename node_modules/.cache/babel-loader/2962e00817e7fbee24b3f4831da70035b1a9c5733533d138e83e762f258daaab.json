{"ast":null,"code":"import userData from \"./CurrentUser.json\";\nconst fs = require('fs');\nlet user;\n\n// Read the user data from a JSON file\ntry {\n  //const userData = fs.readFileSync('CurrentUser.json', 'utf8');\n  const user = JSON.parse(userData);\n} catch (err) {\n  console.error('Error reading user data:', err);\n  // Handle the error, e.g., create a new user object\n  const user = {\n    netid: \"jones1\",\n    password: \"1234\",\n    first_name: \"error\",\n    last_name: \"Jones\",\n    profile_pic: \"default\",\n    gender: \"male\",\n    grade: \"senior\",\n    major: \"computer science\",\n    availability: [{\n      day: 'Tuesday',\n      start: '12:30 PM',\n      end: '1:30 PM'\n    }, {\n      day: 'Thursday',\n      start: '12:00 PM',\n      end: '1:00 PM'\n    }],\n    fav_locations: \"default\",\n    sent_requests: [\"vadamo2\", \"killeen2\"],\n    received_requests: [\"freddy3\", \"chica4\"],\n    confirmed_requests: [\"bonnie5\", \"foxy8\"]\n  };\n}\n\n// Function to update user attributes\nexport function updateUser(updatedUserAttributes) {\n  // Check if the user exists based on userId (netid)\n  if (user.netid === updatedUserAttributes.netid) {\n    // Merge the updated attributes into the user object\n    const updatedUser = {\n      ...user,\n      ...updatedUserAttributes\n    };\n    console.log('updatedUser:', updatedUser);\n\n    // Update the user object\n    user = updatedUser;\n\n    // You can also save the updated user object back to the file\n    try {\n      fs.writeFileSync('user.json', JSON.stringify(updatedUser, null, 2), 'utf8');\n    } catch (err) {\n      console.error('Error writing user data to file:', err);\n    }\n    return updatedUser;\n  } else {\n    // Handle the case where the user does not exist\n    return null;\n  }\n}\n\n// Function to retrieve user data by netid\nexport function getUser(input_user) {\n  return user;\n}","map":{"version":3,"names":["userData","fs","require","user","JSON","parse","err","console","error","netid","password","first_name","last_name","profile_pic","gender","grade","major","availability","day","start","end","fav_locations","sent_requests","received_requests","confirmed_requests","updateUser","updatedUserAttributes","updatedUser","log","writeFileSync","stringify","getUser","input_user"],"sources":["/Users/mona/Desktop/CS465_Project/CS465/src/CurrentUser.js"],"sourcesContent":["import userData from \"./CurrentUser.json\";\n\nconst fs = require('fs');\n\nlet user;\n\n// Read the user data from a JSON file\ntry {\n  //const userData = fs.readFileSync('CurrentUser.json', 'utf8');\n  const user = JSON.parse(userData);\n} catch (err) {\n  console.error('Error reading user data:', err);\n  // Handle the error, e.g., create a new user object\n  const user = {\n    netid: \"jones1\",\n    password: \"1234\",\n    first_name: \"error\",\n    last_name: \"Jones\",\n    profile_pic: \"default\",\n    gender: \"male\",\n    grade: \"senior\",\n    major: \"computer science\",\n    availability: [\n        { day: 'Tuesday', start: '12:30 PM', end: '1:30 PM' },\n        { day: 'Thursday', start: '12:00 PM', end: '1:00 PM' },\n    ],\n    fav_locations: \"default\",\n    sent_requests: [\"vadamo2\", \"killeen2\"],\n    received_requests: [\"freddy3\", \"chica4\"],\n    confirmed_requests: [\"bonnie5\", \"foxy8\"]\n  };\n}\n\n// Function to update user attributes\nexport function updateUser(updatedUserAttributes) {\n  // Check if the user exists based on userId (netid)\n  if (user.netid === updatedUserAttributes.netid) {\n    // Merge the updated attributes into the user object\n    const updatedUser = { ...user, ...updatedUserAttributes };\n    console.log('updatedUser:', updatedUser);\n\n    // Update the user object\n    user = updatedUser;\n\n    // You can also save the updated user object back to the file\n    try {\n      fs.writeFileSync('user.json', JSON.stringify(updatedUser, null, 2), 'utf8');\n    } catch (err) {\n      console.error('Error writing user data to file:', err);\n    }\n\n    return updatedUser;\n  } else {\n    // Handle the case where the user does not exist\n    return null;\n  }\n}\n\n// Function to retrieve user data by netid\nexport function getUser(input_user) {\n  return user;\n}\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oBAAoB;AAEzC,MAAMC,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AAExB,IAAIC,IAAI;;AAER;AACA,IAAI;EACF;EACA,MAAMA,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,QAAQ,CAAC;AACnC,CAAC,CAAC,OAAOM,GAAG,EAAE;EACZC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,GAAG,CAAC;EAC9C;EACA,MAAMH,IAAI,GAAG;IACXM,KAAK,EAAE,QAAQ;IACfC,QAAQ,EAAE,MAAM;IAChBC,UAAU,EAAE,OAAO;IACnBC,SAAS,EAAE,OAAO;IAClBC,WAAW,EAAE,SAAS;IACtBC,MAAM,EAAE,MAAM;IACdC,KAAK,EAAE,QAAQ;IACfC,KAAK,EAAE,kBAAkB;IACzBC,YAAY,EAAE,CACV;MAAEC,GAAG,EAAE,SAAS;MAAEC,KAAK,EAAE,UAAU;MAAEC,GAAG,EAAE;IAAU,CAAC,EACrD;MAAEF,GAAG,EAAE,UAAU;MAAEC,KAAK,EAAE,UAAU;MAAEC,GAAG,EAAE;IAAU,CAAC,CACzD;IACDC,aAAa,EAAE,SAAS;IACxBC,aAAa,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC;IACtCC,iBAAiB,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAC;IACxCC,kBAAkB,EAAE,CAAC,SAAS,EAAE,OAAO;EACzC,CAAC;AACH;;AAEA;AACA,OAAO,SAASC,UAAUA,CAACC,qBAAqB,EAAE;EAChD;EACA,IAAIvB,IAAI,CAACM,KAAK,KAAKiB,qBAAqB,CAACjB,KAAK,EAAE;IAC9C;IACA,MAAMkB,WAAW,GAAG;MAAE,GAAGxB,IAAI;MAAE,GAAGuB;IAAsB,CAAC;IACzDnB,OAAO,CAACqB,GAAG,CAAC,cAAc,EAAED,WAAW,CAAC;;IAExC;IACAxB,IAAI,GAAGwB,WAAW;;IAElB;IACA,IAAI;MACF1B,EAAE,CAAC4B,aAAa,CAAC,WAAW,EAAEzB,IAAI,CAAC0B,SAAS,CAACH,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC;IAC7E,CAAC,CAAC,OAAOrB,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEF,GAAG,CAAC;IACxD;IAEA,OAAOqB,WAAW;EACpB,CAAC,MAAM;IACL;IACA,OAAO,IAAI;EACb;AACF;;AAEA;AACA,OAAO,SAASI,OAAOA,CAACC,UAAU,EAAE;EAClC,OAAO7B,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}