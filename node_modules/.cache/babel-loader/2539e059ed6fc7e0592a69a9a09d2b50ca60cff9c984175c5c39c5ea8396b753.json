{"ast":null,"code":"import { db, ref, get, update } from './DBUtils'; // Import necessary functions\nimport { getDocs, collection, doc, where, query } from 'firebase/firestore';\nexport async function getUser(netId) {\n  try {\n    const usersCollection = collection(db, 'users');\n    const q = query(usersCollection, where('netid', '==', netId));\n    const querySnapshot = await getDocs(q);\n    if (querySnapshot.size === 0) {\n      // Handle the case where no user with the specified netId is found\n      console.log('User not found.');\n      return null;\n    }\n\n    // Assuming netId is unique, there should be only one matching user\n    const userDoc = querySnapshot.docs[0];\n\n    // Access the user data\n    const userData = userDoc.data();\n    return userData;\n  } catch (error) {\n    console.error('Error fetching user data:', error);\n    return null;\n  }\n}\n\n// Function to update user attributes\nexport async function updateUser(updatedUserAttributes) {\n  const userId = updatedUserAttributes.netid; // Assuming 'netid' is the user's identifier\n\n  try {\n    // Create a reference to the user's data in the Firebase database\n    const userRef = ref(db, 'users');\n\n    // Fetch the user's data\n    const userSnapshot = await get(userRef);\n    if (userSnapshot.exists()) {\n      const user = userSnapshot.val();\n      const updatedUser = {\n        ...user,\n        ...updatedUserAttributes\n      };\n\n      // Update the user's data in the database\n      await update(userRef, updatedUser);\n      return updatedUser;\n    } else {\n      // Handle the case where the user does not exist\n      return null;\n    }\n  } catch (error) {\n    console.error('Error updating user data:', error);\n    return null;\n  }\n}\n\n// // Function to retrieve user data by netId\n// export async function getUser(netId) {\n//   try {\n//     // Create a reference to the Firebase database\n//     const dbRef = ref(db);\n\n//     // Query the database for users with the specified netId\n//     const queryRef = query(\n//       dbRef,\n//       orderByChild('netId'),\n//       equalTo(netId)\n//     );\n\n//     // Execute the query and get the result\n//     const querySnapshot = await get(queryRef);\n\n//     if (querySnapshot.exists()) {\n//       // Assuming there is only one user with the specified netId\n//       const userData = querySnapshot.val();\n//       const userId = Object.keys(userData)[0];\n//       return userData[userId];\n//     } else {\n//       // Handle the case where the user does not exist\n//       return null;\n//     }\n//   } catch (error) {\n//     console.error('Error fetching user data:', error);\n//     return null;\n//   }\n// }","map":{"version":3,"names":["db","ref","get","update","getDocs","collection","doc","where","query","getUser","netId","usersCollection","q","querySnapshot","size","console","log","userDoc","docs","userData","data","error","updateUser","updatedUserAttributes","userId","netid","userRef","userSnapshot","exists","user","val","updatedUser"],"sources":["/Users/mona/Desktop/CS465_Project/CS465/src/CurrentUser.js"],"sourcesContent":["import { db, ref, get, update } from './DBUtils'; // Import necessary functions\nimport { getDocs, collection, doc, where, query } from 'firebase/firestore';\n\n\nexport async function getUser(netId) {\n  try {\n    const usersCollection = collection(db, 'users'); \n    const q = query(usersCollection, where('netid', '==', netId));\n\n    const querySnapshot = await getDocs(q);\n\n    if (querySnapshot.size === 0) {\n      // Handle the case where no user with the specified netId is found\n      console.log('User not found.');\n      return null;\n    }\n\n    // Assuming netId is unique, there should be only one matching user\n    const userDoc = querySnapshot.docs[0];\n\n    // Access the user data\n    const userData = userDoc.data();\n\n    return userData;\n  } catch (error) {\n    console.error('Error fetching user data:', error);\n    return null;\n  }\n}\n\n\n\n// Function to update user attributes\nexport async function updateUser(updatedUserAttributes) {\n  const userId = updatedUserAttributes.netid; // Assuming 'netid' is the user's identifier\n\n  try {\n    // Create a reference to the user's data in the Firebase database\n    const userRef = ref(db, 'users');\n\n    // Fetch the user's data\n    const userSnapshot = await get(userRef);\n\n    if (userSnapshot.exists()) {\n      const user = userSnapshot.val();\n      const updatedUser = { ...user, ...updatedUserAttributes };\n\n      // Update the user's data in the database\n      await update(userRef, updatedUser);\n\n      return updatedUser;\n    } else {\n      // Handle the case where the user does not exist\n      return null;\n    }\n  } catch (error) {\n    console.error('Error updating user data:', error);\n    return null;\n  }\n}\n\n// // Function to retrieve user data by netId\n// export async function getUser(netId) {\n//   try {\n//     // Create a reference to the Firebase database\n//     const dbRef = ref(db);\n\n//     // Query the database for users with the specified netId\n//     const queryRef = query(\n//       dbRef,\n//       orderByChild('netId'),\n//       equalTo(netId)\n//     );\n\n//     // Execute the query and get the result\n//     const querySnapshot = await get(queryRef);\n\n//     if (querySnapshot.exists()) {\n//       // Assuming there is only one user with the specified netId\n//       const userData = querySnapshot.val();\n//       const userId = Object.keys(userData)[0];\n//       return userData[userId];\n//     } else {\n//       // Handle the case where the user does not exist\n//       return null;\n//     }\n//   } catch (error) {\n//     console.error('Error fetching user data:', error);\n//     return null;\n//   }\n// }\n\n\n"],"mappings":"AAAA,SAASA,EAAE,EAAEC,GAAG,EAAEC,GAAG,EAAEC,MAAM,QAAQ,WAAW,CAAC,CAAC;AAClD,SAASC,OAAO,EAAEC,UAAU,EAAEC,GAAG,EAAEC,KAAK,EAAEC,KAAK,QAAQ,oBAAoB;AAG3E,OAAO,eAAeC,OAAOA,CAACC,KAAK,EAAE;EACnC,IAAI;IACF,MAAMC,eAAe,GAAGN,UAAU,CAACL,EAAE,EAAE,OAAO,CAAC;IAC/C,MAAMY,CAAC,GAAGJ,KAAK,CAACG,eAAe,EAAEJ,KAAK,CAAC,OAAO,EAAE,IAAI,EAAEG,KAAK,CAAC,CAAC;IAE7D,MAAMG,aAAa,GAAG,MAAMT,OAAO,CAACQ,CAAC,CAAC;IAEtC,IAAIC,aAAa,CAACC,IAAI,KAAK,CAAC,EAAE;MAC5B;MACAC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAC9B,OAAO,IAAI;IACb;;IAEA;IACA,MAAMC,OAAO,GAAGJ,aAAa,CAACK,IAAI,CAAC,CAAC,CAAC;;IAErC;IACA,MAAMC,QAAQ,GAAGF,OAAO,CAACG,IAAI,CAAC,CAAC;IAE/B,OAAOD,QAAQ;EACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO,IAAI;EACb;AACF;;AAIA;AACA,OAAO,eAAeC,UAAUA,CAACC,qBAAqB,EAAE;EACtD,MAAMC,MAAM,GAAGD,qBAAqB,CAACE,KAAK,CAAC,CAAC;;EAE5C,IAAI;IACF;IACA,MAAMC,OAAO,GAAGzB,GAAG,CAACD,EAAE,EAAE,OAAO,CAAC;;IAEhC;IACA,MAAM2B,YAAY,GAAG,MAAMzB,GAAG,CAACwB,OAAO,CAAC;IAEvC,IAAIC,YAAY,CAACC,MAAM,CAAC,CAAC,EAAE;MACzB,MAAMC,IAAI,GAAGF,YAAY,CAACG,GAAG,CAAC,CAAC;MAC/B,MAAMC,WAAW,GAAG;QAAE,GAAGF,IAAI;QAAE,GAAGN;MAAsB,CAAC;;MAEzD;MACA,MAAMpB,MAAM,CAACuB,OAAO,EAAEK,WAAW,CAAC;MAElC,OAAOA,WAAW;IACpB,CAAC,MAAM;MACL;MACA,OAAO,IAAI;IACb;EACF,CAAC,CAAC,OAAOV,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO,IAAI;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}