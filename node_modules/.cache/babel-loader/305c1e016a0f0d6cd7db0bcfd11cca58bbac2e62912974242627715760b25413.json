{"ast":null,"code":"import { db } from './DBUtils';\nimport { ref, get } from 'firebase/database';\nexport async function getUser(netId) {\n  try {\n    // Use the 'db' to query the database and fetch user data based on the 'netId'\n    const userRef = ref(db, `/users`);\n    const snapshot = await get(userRef);\n    if (snapshot.exists()) {\n      // Extract and return the user data\n      const usersData = snapshot.val();\n      // Iterate through the users to find the one with the matching 'major' attribute\n      for (const user in usersData) {\n        console.log(netId);\n        if (user.netid === netId) {\n          return user; // Found a user with the specified 'major'\n        }\n      }\n    } else {\n      // Handle the case when the user doesn't exist\n      return null;\n    }\n  } catch (error) {\n    // Handle any potential errors\n    console.error(\"Error fetching user:\", error);\n    throw error;\n  }\n}\nexport async function updateUser(updatedUserAttributes) {\n  try {\n    // Implement the logic to update user attributes in the database\n    // You should use 'ref', 'set', 'update', or other relevant Firebase methods here\n    // Remember to handle any errors that may occur during the update process\n  } catch (error) {\n    // Handle any potential errors\n    console.error(\"Error updating user:\", error);\n    throw error;\n  }\n}\n\n// export async function getUser(netId) {\n//   try {\n//     const usersCollection = collection(db, 'users'); \n//     const q = query(usersCollection, where('netid', '==', netId));\n\n//     const querySnapshot = await getDocs(q);\n\n//     if (querySnapshot.size === 0) {\n//       // Handle the case where no user with the specified netId is found\n//       console.log('User not found.');\n//       return null;\n//     }\n\n//     // Assuming netId is unique, there should be only one matching user\n//     const userDoc = querySnapshot.docs[0];\n\n//     // Access the user data\n//     const userData = userDoc.data();\n\n//     return userData;\n//   } catch (error) {\n//     console.error('Error fetching user data:', error);\n//     return null;\n//   }\n// }\n\n// // Function to update user attributes\n// export async function updateUser(updatedUserAttributes) {\n//   const userId = updatedUserAttributes.netid; // Assuming 'netid' is the user's identifier\n\n//   try {\n//     // Create a reference to the user's data in the Firebase database\n//     const userRef = ref(db, 'users');\n\n//     // Fetch the user's data\n//     const userSnapshot = await get(userRef);\n\n//     if (userSnapshot.exists()) {\n//       const user = userSnapshot.val();\n//       const updatedUser = { ...user, ...updatedUserAttributes };\n\n//       // Update the user's data in the database\n//       await update(userRef, updatedUser);\n\n//       return updatedUser;\n//     } else {\n//       // Handle the case where the user does not exist\n//       return null;\n//     }\n//   } catch (error) {\n//     console.error('Error updating user data:', error);\n//     return null;\n//   }\n// }\n\n// // // Function to retrieve user data by netId\n// // export async function getUser(netId) {\n// //   try {\n// //     // Create a reference to the Firebase database\n// //     const dbRef = ref(db);\n\n// //     // Query the database for users with the specified netId\n// //     const queryRef = query(\n// //       dbRef,\n// //       orderByChild('netId'),\n// //       equalTo(netId)\n// //     );\n\n// //     // Execute the query and get the result\n// //     const querySnapshot = await get(queryRef);\n\n// //     if (querySnapshot.exists()) {\n// //       // Assuming there is only one user with the specified netId\n// //       const userData = querySnapshot.val();\n// //       const userId = Object.keys(userData)[0];\n// //       return userData[userId];\n// //     } else {\n// //       // Handle the case where the user does not exist\n// //       return null;\n// //     }\n// //   } catch (error) {\n// //     console.error('Error fetching user data:', error);\n// //     return null;\n// //   }\n// // }","map":{"version":3,"names":["db","ref","get","getUser","netId","userRef","snapshot","exists","usersData","val","user","console","log","netid","error","updateUser","updatedUserAttributes"],"sources":["/Users/mona/Desktop/CS465_Project/CS465/src/CurrentUser.js"],"sourcesContent":["import { db } from './DBUtils'; \nimport { ref, get } from 'firebase/database';\n\nexport async function getUser(netId) {\n  try {\n    // Use the 'db' to query the database and fetch user data based on the 'netId'\n    const userRef = ref(db, `/users`);\n    const snapshot = await get(userRef);\n\n    if (snapshot.exists()) {\n      // Extract and return the user data\n      const usersData = snapshot.val();\n      // Iterate through the users to find the one with the matching 'major' attribute\n      for (const user in usersData) {\n        console.log(netId);\n        if (user.netid === netId) {\n          \n          return user; // Found a user with the specified 'major'\n        }\n      }\n    } else {\n      // Handle the case when the user doesn't exist\n      return null;\n    }\n  } catch (error) {\n    // Handle any potential errors\n    console.error(\"Error fetching user:\", error);\n    throw error;\n  }\n}\n\nexport async function updateUser(updatedUserAttributes) {\n  try {\n    // Implement the logic to update user attributes in the database\n    // You should use 'ref', 'set', 'update', or other relevant Firebase methods here\n    // Remember to handle any errors that may occur during the update process\n  } catch (error) {\n    // Handle any potential errors\n    console.error(\"Error updating user:\", error);\n    throw error;\n  }\n}\n\n// export async function getUser(netId) {\n//   try {\n//     const usersCollection = collection(db, 'users'); \n//     const q = query(usersCollection, where('netid', '==', netId));\n\n//     const querySnapshot = await getDocs(q);\n\n//     if (querySnapshot.size === 0) {\n//       // Handle the case where no user with the specified netId is found\n//       console.log('User not found.');\n//       return null;\n//     }\n\n//     // Assuming netId is unique, there should be only one matching user\n//     const userDoc = querySnapshot.docs[0];\n\n//     // Access the user data\n//     const userData = userDoc.data();\n\n//     return userData;\n//   } catch (error) {\n//     console.error('Error fetching user data:', error);\n//     return null;\n//   }\n// }\n\n\n\n// // Function to update user attributes\n// export async function updateUser(updatedUserAttributes) {\n//   const userId = updatedUserAttributes.netid; // Assuming 'netid' is the user's identifier\n\n//   try {\n//     // Create a reference to the user's data in the Firebase database\n//     const userRef = ref(db, 'users');\n\n//     // Fetch the user's data\n//     const userSnapshot = await get(userRef);\n\n//     if (userSnapshot.exists()) {\n//       const user = userSnapshot.val();\n//       const updatedUser = { ...user, ...updatedUserAttributes };\n\n//       // Update the user's data in the database\n//       await update(userRef, updatedUser);\n\n//       return updatedUser;\n//     } else {\n//       // Handle the case where the user does not exist\n//       return null;\n//     }\n//   } catch (error) {\n//     console.error('Error updating user data:', error);\n//     return null;\n//   }\n// }\n\n// // // Function to retrieve user data by netId\n// // export async function getUser(netId) {\n// //   try {\n// //     // Create a reference to the Firebase database\n// //     const dbRef = ref(db);\n\n// //     // Query the database for users with the specified netId\n// //     const queryRef = query(\n// //       dbRef,\n// //       orderByChild('netId'),\n// //       equalTo(netId)\n// //     );\n\n// //     // Execute the query and get the result\n// //     const querySnapshot = await get(queryRef);\n\n// //     if (querySnapshot.exists()) {\n// //       // Assuming there is only one user with the specified netId\n// //       const userData = querySnapshot.val();\n// //       const userId = Object.keys(userData)[0];\n// //       return userData[userId];\n// //     } else {\n// //       // Handle the case where the user does not exist\n// //       return null;\n// //     }\n// //   } catch (error) {\n// //     console.error('Error fetching user data:', error);\n// //     return null;\n// //   }\n// // }\n\n\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,WAAW;AAC9B,SAASC,GAAG,EAAEC,GAAG,QAAQ,mBAAmB;AAE5C,OAAO,eAAeC,OAAOA,CAACC,KAAK,EAAE;EACnC,IAAI;IACF;IACA,MAAMC,OAAO,GAAGJ,GAAG,CAACD,EAAE,EAAG,QAAO,CAAC;IACjC,MAAMM,QAAQ,GAAG,MAAMJ,GAAG,CAACG,OAAO,CAAC;IAEnC,IAAIC,QAAQ,CAACC,MAAM,CAAC,CAAC,EAAE;MACrB;MACA,MAAMC,SAAS,GAAGF,QAAQ,CAACG,GAAG,CAAC,CAAC;MAChC;MACA,KAAK,MAAMC,IAAI,IAAIF,SAAS,EAAE;QAC5BG,OAAO,CAACC,GAAG,CAACR,KAAK,CAAC;QAClB,IAAIM,IAAI,CAACG,KAAK,KAAKT,KAAK,EAAE;UAExB,OAAOM,IAAI,CAAC,CAAC;QACf;MACF;IACF,CAAC,MAAM;MACL;MACA,OAAO,IAAI;IACb;EACF,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd;IACAH,OAAO,CAACG,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeC,UAAUA,CAACC,qBAAqB,EAAE;EACtD,IAAI;IACF;IACA;IACA;EAAA,CACD,CAAC,OAAOF,KAAK,EAAE;IACd;IACAH,OAAO,CAACG,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}