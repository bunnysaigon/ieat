{"ast":null,"code":"import users from './users'; // Import your user data\n\nexport function getUsersWithCompatibleAvailability(currentUser) {\n  const compatibleUsers = users.filter(user => {\n    // TODO: \n    // Implement the logic to check compatibility\n    // Return true if the user is compatible with the currentUser\n    return isCompatible(user, currentUser);\n  });\n  return compatibleUsers;\n}\nfunction isCompatible(user, currentUser) {\n  if (user.availability && currentUser.availability) {\n    const userAvailability = user.availability;\n    const currentUserAvailability = currentUser.availability;\n\n    // Create an array to store compatibility for each day\n    const compatibilityByDay = {};\n\n    // Iterate over each day of the week\n    const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n    for (const day of daysOfWeek) {\n      // Find time slots for the current day\n      const userDayAvailability = userAvailability.find(slot => slot.day === day);\n      const currentUserDayAvailability = currentUserAvailability.find(slot => slot.day === day);\n\n      // If both users have availability for the current day, check for overlaps\n      if (userDayAvailability && currentUserDayAvailability) {\n        const userStart = new Date(`1970-01-01 ${userDayAvailability.start}`);\n        const userEnd = new Date(`1970-01-01 ${userDayAvailability.end}`);\n        const currentUserStart = new Date(`1970-01-01 ${currentUserDayAvailability.start}`);\n        const currentUserEnd = new Date(`1970-01-01 ${currentUserDayAvailability.end}`);\n\n        // Check for overlap on the current day\n        if (userStart <= currentUserEnd && userEnd >= currentUserStart) {\n          // Users are compatible for this day\n          compatibilityByDay[day] = true;\n        } else {\n          compatibilityByDay[day] = false;\n        }\n      } else {\n        // If one of the users doesn't have availability for the current day, they are not compatible\n        compatibilityByDay[day] = false;\n      }\n    }\n\n    // Check if the users are compatible for all days of the week\n    return Object.values(compatibilityByDay).every(isCompatible => isCompatible);\n  }\n  return false; // Users are not compatible\n}","map":{"version":3,"names":["users","getUsersWithCompatibleAvailability","currentUser","compatibleUsers","filter","user","isCompatible","availability","userAvailability","currentUserAvailability","compatibilityByDay","daysOfWeek","day","userDayAvailability","find","slot","currentUserDayAvailability","userStart","Date","start","userEnd","end","currentUserStart","currentUserEnd","Object","values","every"],"sources":["/Users/mona/Desktop/CS465_Project/CS465/src/userUtils.js"],"sourcesContent":["import users from './users'; // Import your user data\n\nexport function getUsersWithCompatibleAvailability(currentUser) {\n  const compatibleUsers = users.filter((user) => {\n    // TODO: \n    // Implement the logic to check compatibility\n    // Return true if the user is compatible with the currentUser\n    return isCompatible(user, currentUser);\n  });\n  return compatibleUsers;\n}\n\nfunction isCompatible(user, currentUser) {\n    if (user.availability && currentUser.availability) {\n      const userAvailability = user.availability;\n      const currentUserAvailability = currentUser.availability;\n  \n      // Create an array to store compatibility for each day\n      const compatibilityByDay = {};\n  \n      // Iterate over each day of the week\n      const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n      for (const day of daysOfWeek) {\n        // Find time slots for the current day\n        const userDayAvailability = userAvailability.find(slot => slot.day === day);\n        const currentUserDayAvailability = currentUserAvailability.find(slot => slot.day === day);\n  \n        // If both users have availability for the current day, check for overlaps\n        if (userDayAvailability && currentUserDayAvailability) {\n          const userStart = new Date(`1970-01-01 ${userDayAvailability.start}`);\n          const userEnd = new Date(`1970-01-01 ${userDayAvailability.end}`);\n          const currentUserStart = new Date(`1970-01-01 ${currentUserDayAvailability.start}`);\n          const currentUserEnd = new Date(`1970-01-01 ${currentUserDayAvailability.end}`);\n  \n          // Check for overlap on the current day\n          if (userStart <= currentUserEnd && userEnd >= currentUserStart) {\n            // Users are compatible for this day\n            compatibilityByDay[day] = true;\n          } else {\n            compatibilityByDay[day] = false;\n          }\n        } else {\n          // If one of the users doesn't have availability for the current day, they are not compatible\n          compatibilityByDay[day] = false;\n        }\n      }\n  \n      // Check if the users are compatible for all days of the week\n      return Object.values(compatibilityByDay).every(isCompatible => isCompatible);\n    }\n  \n    return false; // Users are not compatible\n\n}\n  \n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,SAAS,CAAC,CAAC;;AAE7B,OAAO,SAASC,kCAAkCA,CAACC,WAAW,EAAE;EAC9D,MAAMC,eAAe,GAAGH,KAAK,CAACI,MAAM,CAAEC,IAAI,IAAK;IAC7C;IACA;IACA;IACA,OAAOC,YAAY,CAACD,IAAI,EAAEH,WAAW,CAAC;EACxC,CAAC,CAAC;EACF,OAAOC,eAAe;AACxB;AAEA,SAASG,YAAYA,CAACD,IAAI,EAAEH,WAAW,EAAE;EACrC,IAAIG,IAAI,CAACE,YAAY,IAAIL,WAAW,CAACK,YAAY,EAAE;IACjD,MAAMC,gBAAgB,GAAGH,IAAI,CAACE,YAAY;IAC1C,MAAME,uBAAuB,GAAGP,WAAW,CAACK,YAAY;;IAExD;IACA,MAAMG,kBAAkB,GAAG,CAAC,CAAC;;IAE7B;IACA,MAAMC,UAAU,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,CAAC;IACjG,KAAK,MAAMC,GAAG,IAAID,UAAU,EAAE;MAC5B;MACA,MAAME,mBAAmB,GAAGL,gBAAgB,CAACM,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACH,GAAG,KAAKA,GAAG,CAAC;MAC3E,MAAMI,0BAA0B,GAAGP,uBAAuB,CAACK,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACH,GAAG,KAAKA,GAAG,CAAC;;MAEzF;MACA,IAAIC,mBAAmB,IAAIG,0BAA0B,EAAE;QACrD,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAE,cAAaL,mBAAmB,CAACM,KAAM,EAAC,CAAC;QACrE,MAAMC,OAAO,GAAG,IAAIF,IAAI,CAAE,cAAaL,mBAAmB,CAACQ,GAAI,EAAC,CAAC;QACjE,MAAMC,gBAAgB,GAAG,IAAIJ,IAAI,CAAE,cAAaF,0BAA0B,CAACG,KAAM,EAAC,CAAC;QACnF,MAAMI,cAAc,GAAG,IAAIL,IAAI,CAAE,cAAaF,0BAA0B,CAACK,GAAI,EAAC,CAAC;;QAE/E;QACA,IAAIJ,SAAS,IAAIM,cAAc,IAAIH,OAAO,IAAIE,gBAAgB,EAAE;UAC9D;UACAZ,kBAAkB,CAACE,GAAG,CAAC,GAAG,IAAI;QAChC,CAAC,MAAM;UACLF,kBAAkB,CAACE,GAAG,CAAC,GAAG,KAAK;QACjC;MACF,CAAC,MAAM;QACL;QACAF,kBAAkB,CAACE,GAAG,CAAC,GAAG,KAAK;MACjC;IACF;;IAEA;IACA,OAAOY,MAAM,CAACC,MAAM,CAACf,kBAAkB,CAAC,CAACgB,KAAK,CAACpB,YAAY,IAAIA,YAAY,CAAC;EAC9E;EAEA,OAAO,KAAK,CAAC,CAAC;AAElB"},"metadata":{},"sourceType":"module","externalDependencies":[]}