{"ast":null,"code":"import users from './users'; // Import your user data\n\nexport function getUsersWithCompatibleAvailability(currentUser) {\n  const compatibleUsers = users.filter(user => {\n    // TODO: \n    // Implement the logic to check compatibility\n    // Return true if the user is compatible with the currentUser\n    return isCompatible(user, currentUser);\n  });\n  return compatibleUsers;\n}\nfunction isCompatible(user, currentUser, lunchtimeAvailability) {\n  // Check if both users have availability for lunchtime\n  if (user.availability && currentUser.availability) {\n    // Get the lunchtime availability for both users\n    const userLunchAvailability = user.availability[lunchtimeAvailability];\n    const currentUserLunchAvailability = currentUser.availability[lunchtimeAvailability];\n\n    // Check if there is an overlapping time window\n    for (const userSlot of userLunchAvailability) {\n      for (const currentSlot of currentUserLunchAvailability) {\n        const userStart = new Date(`1970-01-01 ${userSlot.start}`);\n        const userEnd = new Date(`1970-01-01 ${userSlot.end}`);\n        const currentUserStart = new Date(`1970-01-01 ${currentSlot.start}`);\n        const currentUserEnd = new Date(`1970-01-01 ${currentSlot.end}`);\n\n        // Check if there is an overlap in time\n        if (userStart <= currentUserEnd && userEnd >= currentUserStart) {\n          return true; // Users are compatible\n        }\n      }\n    }\n  }\n\n  return false; // Users are not compatible for lunch\n}","map":{"version":3,"names":["users","getUsersWithCompatibleAvailability","currentUser","compatibleUsers","filter","user","isCompatible","lunchtimeAvailability","availability","userLunchAvailability","currentUserLunchAvailability","userSlot","currentSlot","userStart","Date","start","userEnd","end","currentUserStart","currentUserEnd"],"sources":["/Users/mona/Desktop/CS465_Project/CS465/src/userUtils.js"],"sourcesContent":["import users from './users'; // Import your user data\n\nexport function getUsersWithCompatibleAvailability(currentUser) {\n  const compatibleUsers = users.filter((user) => {\n    // TODO: \n    // Implement the logic to check compatibility\n    // Return true if the user is compatible with the currentUser\n    return isCompatible(user, currentUser);\n  });\n  return compatibleUsers;\n}\n\nfunction isCompatible(user, currentUser, lunchtimeAvailability) {\n    // Check if both users have availability for lunchtime\n    if (user.availability && currentUser.availability) {\n      // Get the lunchtime availability for both users\n      const userLunchAvailability = user.availability[lunchtimeAvailability];\n      const currentUserLunchAvailability = currentUser.availability[lunchtimeAvailability];\n  \n      // Check if there is an overlapping time window\n      for (const userSlot of userLunchAvailability) {\n        for (const currentSlot of currentUserLunchAvailability) {\n          const userStart = new Date(`1970-01-01 ${userSlot.start}`);\n          const userEnd = new Date(`1970-01-01 ${userSlot.end}`);\n          const currentUserStart = new Date(`1970-01-01 ${currentSlot.start}`);\n          const currentUserEnd = new Date(`1970-01-01 ${currentSlot.end}`);\n  \n          // Check if there is an overlap in time\n          if (userStart <= currentUserEnd && userEnd >= currentUserStart) {\n            return true; // Users are compatible\n          }\n        }\n      }\n    }\n  \n    return false; // Users are not compatible for lunch\n  }\n  \n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,SAAS,CAAC,CAAC;;AAE7B,OAAO,SAASC,kCAAkCA,CAACC,WAAW,EAAE;EAC9D,MAAMC,eAAe,GAAGH,KAAK,CAACI,MAAM,CAAEC,IAAI,IAAK;IAC7C;IACA;IACA;IACA,OAAOC,YAAY,CAACD,IAAI,EAAEH,WAAW,CAAC;EACxC,CAAC,CAAC;EACF,OAAOC,eAAe;AACxB;AAEA,SAASG,YAAYA,CAACD,IAAI,EAAEH,WAAW,EAAEK,qBAAqB,EAAE;EAC5D;EACA,IAAIF,IAAI,CAACG,YAAY,IAAIN,WAAW,CAACM,YAAY,EAAE;IACjD;IACA,MAAMC,qBAAqB,GAAGJ,IAAI,CAACG,YAAY,CAACD,qBAAqB,CAAC;IACtE,MAAMG,4BAA4B,GAAGR,WAAW,CAACM,YAAY,CAACD,qBAAqB,CAAC;;IAEpF;IACA,KAAK,MAAMI,QAAQ,IAAIF,qBAAqB,EAAE;MAC5C,KAAK,MAAMG,WAAW,IAAIF,4BAA4B,EAAE;QACtD,MAAMG,SAAS,GAAG,IAAIC,IAAI,CAAE,cAAaH,QAAQ,CAACI,KAAM,EAAC,CAAC;QAC1D,MAAMC,OAAO,GAAG,IAAIF,IAAI,CAAE,cAAaH,QAAQ,CAACM,GAAI,EAAC,CAAC;QACtD,MAAMC,gBAAgB,GAAG,IAAIJ,IAAI,CAAE,cAAaF,WAAW,CAACG,KAAM,EAAC,CAAC;QACpE,MAAMI,cAAc,GAAG,IAAIL,IAAI,CAAE,cAAaF,WAAW,CAACK,GAAI,EAAC,CAAC;;QAEhE;QACA,IAAIJ,SAAS,IAAIM,cAAc,IAAIH,OAAO,IAAIE,gBAAgB,EAAE;UAC9D,OAAO,IAAI,CAAC,CAAC;QACf;MACF;IACF;EACF;;EAEA,OAAO,KAAK,CAAC,CAAC;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}