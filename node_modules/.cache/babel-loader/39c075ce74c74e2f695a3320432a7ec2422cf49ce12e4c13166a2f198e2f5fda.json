{"ast":null,"code":"import users from './UserRepository'; // Import your user data\n\n// TODO: \n\nexport function getUsersWithCompatibleAvailability(currentUser) {\n  const compatibleUsers = users.filter(user => {\n    // TODO: \n    // Implement the logic to check compatibility\n    // Return true if the user is compatible with the currentUser\n    return isCompatible(user, currentUser);\n  });\n  return compatibleUsers;\n}\nfunction isCompatible(user, currentUser) {\n  if (user.availability && currentUser.availability) {\n    const userAvailability = user.availability;\n    const currentUserAvailability = currentUser.availability;\n\n    // Iterate over each day of the week\n    const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n    for (const day of daysOfWeek) {\n      // Find time slots for the current day\n      const userDayAvailability = userAvailability.find(slot => slot.day === day);\n      const currentUserDayAvailability = currentUserAvailability.find(slot => slot.day === day);\n\n      // If both users have availability for the current day, check for overlaps\n      if (userDayAvailability && currentUserDayAvailability) {\n        // TODO: \n        // implement the logic to check for overlaps\n        console.log(`Compatibility for ${day}: true`);\n        return true;\n      } else {\n        // If one of the users doesn't have availability for the current day, they are not compatible\n        //compatibilityByDay[day] = false;\n      }\n    }\n  }\n  return false; // Users are not compatible\n}","map":{"version":3,"names":["users","getUsersWithCompatibleAvailability","currentUser","compatibleUsers","filter","user","isCompatible","availability","userAvailability","currentUserAvailability","daysOfWeek","day","userDayAvailability","find","slot","currentUserDayAvailability","console","log"],"sources":["/Users/mona/Desktop/CS465_Project/CS465/src/AvailibilityUtils.js"],"sourcesContent":["import users from './UserRepository'; // Import your user data\n\n// TODO: \n\nexport function getUsersWithCompatibleAvailability(currentUser) {\n  const compatibleUsers = users.filter((user) => {\n    // TODO: \n    // Implement the logic to check compatibility\n    // Return true if the user is compatible with the currentUser\n    return isCompatible(user, currentUser);\n  });\n  return compatibleUsers;\n}\n\nfunction isCompatible(user, currentUser) {\n    if (user.availability && currentUser.availability) {\n      const userAvailability = user.availability;\n      const currentUserAvailability = currentUser.availability;\n\n  \n      // Iterate over each day of the week\n      const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n      for (const day of daysOfWeek) {\n        // Find time slots for the current day\n        const userDayAvailability = userAvailability.find(slot => slot.day === day);\n        const currentUserDayAvailability = currentUserAvailability.find(slot => slot.day === day);\n  \n        // If both users have availability for the current day, check for overlaps\n        if (userDayAvailability && currentUserDayAvailability) {\n            // TODO: \n            // implement the logic to check for overlaps\n            console.log(`Compatibility for ${day}: true`);\n             return true;\n            \n        } else {\n          // If one of the users doesn't have availability for the current day, they are not compatible\n          //compatibilityByDay[day] = false;\n        }\n      }\n    }\n  \n    return false; // Users are not compatible\n\n}\n  \n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,kBAAkB,CAAC,CAAC;;AAEtC;;AAEA,OAAO,SAASC,kCAAkCA,CAACC,WAAW,EAAE;EAC9D,MAAMC,eAAe,GAAGH,KAAK,CAACI,MAAM,CAAEC,IAAI,IAAK;IAC7C;IACA;IACA;IACA,OAAOC,YAAY,CAACD,IAAI,EAAEH,WAAW,CAAC;EACxC,CAAC,CAAC;EACF,OAAOC,eAAe;AACxB;AAEA,SAASG,YAAYA,CAACD,IAAI,EAAEH,WAAW,EAAE;EACrC,IAAIG,IAAI,CAACE,YAAY,IAAIL,WAAW,CAACK,YAAY,EAAE;IACjD,MAAMC,gBAAgB,GAAGH,IAAI,CAACE,YAAY;IAC1C,MAAME,uBAAuB,GAAGP,WAAW,CAACK,YAAY;;IAGxD;IACA,MAAMG,UAAU,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,CAAC;IACjG,KAAK,MAAMC,GAAG,IAAID,UAAU,EAAE;MAC5B;MACA,MAAME,mBAAmB,GAAGJ,gBAAgB,CAACK,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACH,GAAG,KAAKA,GAAG,CAAC;MAC3E,MAAMI,0BAA0B,GAAGN,uBAAuB,CAACI,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACH,GAAG,KAAKA,GAAG,CAAC;;MAEzF;MACA,IAAIC,mBAAmB,IAAIG,0BAA0B,EAAE;QACnD;QACA;QACAC,OAAO,CAACC,GAAG,CAAE,qBAAoBN,GAAI,QAAO,CAAC;QAC5C,OAAO,IAAI;MAEhB,CAAC,MAAM;QACL;QACA;MAAA;IAEJ;EACF;EAEA,OAAO,KAAK,CAAC,CAAC;AAElB"},"metadata":{},"sourceType":"module","externalDependencies":[]}